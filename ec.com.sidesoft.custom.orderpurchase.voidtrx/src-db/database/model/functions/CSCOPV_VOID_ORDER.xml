<?xml version="1.0"?>
  <database name="FUNCTION CSCOPV_VOID_ORDER">
    <function name="CSCOPV_VOID_ORDER" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[--  Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Docstatus VARCHAR2(60):='';
  
  --  Parameter
  v_NextNo VARCHAR2(32);
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    --
    p_Record_ID VARCHAR2(32):=NULL;
    --  Tests to include
    Cur_PC_Test RECORD;
    --
    v_StartDate DATE;
    v_Periodic_Control_ID VARCHAR2(32);
    v_User_ID VARCHAR2(32);
    v_Client_ID VARCHAR2(32);
    v_Org_ID VARCHAR2(32);
  BEGIN
    --  Process Parameters
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      --  Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          i.AD_Org_ID,
          i.AD_Client_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        p_Record_ID:=Cur_Parameter.Record_ID;
        v_User_ID:=Cur_Parameter.AD_User_ID;
        v_Client_ID:=Cur_Parameter.AD_Client_ID;
        v_Org_ID:=Cur_Parameter.AD_Org_ID;
      END LOOP; --  Get Parameter
    ELSE
      DBMS_OUTPUT.PUT_LINE('--<<MA_WorkRequirement_Close>>') ;
    END IF;
  BEGIN --BODY
    v_ResultStr:='Update status order to Void';
	
	select coalesce((Select docstatus 
	from c_order 
	where issotrx='Y' and
	c_order_id = p_Record_ID),'ND')
	into v_Docstatus
	from dual;
	
	if (v_Docstatus='CO') then
        DBMS_OUTPUT.PUT_LINE('Updating Status - Finished ' || v_Message) ;

		--update c_order set docstatus='VO' where c_order_id = p_Record_ID;
		/*-- Cancel all Items
        UPDATE C_ORDERLINE
          SET QtyOrdered=0,
          --MODIFIED BY F.IRIAZABAL
          QuantityOrder = CASE WHEN C_AUM IS NOT NULL OR (C_AUM IS NULL AND M_PRODUCT_UOM_ID IS NULL) THEN NULL ELSE 0 END,
          LineNetAmt=0,
          Updated=now()
        WHERE C_Order_ID=p_Record_ID
          AND QtyOrdered<>0;*/
		  
		UPDATE C_ORDER
            SET DocStatus='VO',
                DocAction='--',
                Processed='Y',
                Updated=now(),
                UpdatedBy=v_User_ID
            WHERE C_Order_ID=p_Record_ID;
	end if;
	
   
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('--<<cscopv_void_order finished>> ' || v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    ROLLBACK;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
  --p_Invoice_ID := 0;        --  Error Indicator
  RETURN;
END CSCOPV_VOID_ORDER
]]></body>
    </function>
  </database>
