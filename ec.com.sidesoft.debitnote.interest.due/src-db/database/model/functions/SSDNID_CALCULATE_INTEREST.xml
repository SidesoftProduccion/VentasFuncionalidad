<?xml version="1.0"?>
  <database name="FUNCTION SSDNID_CALCULATE_INTEREST">
    <function name="SSDNID_CALCULATE_INTEREST" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
	v_ResultStr VARCHAR2(2000):='';
	v_Message TEXT:=''; --OBTG:VARCHAR2--
	-- Parameter
	CurParameter RECORD;
	vRecordID VARCHAR2(32);
	-- Variables
	vRecord RECORD;
	vSetting RECORD;
	vDaysLate NUMBER;
	vInterestLatePayment NUMBER;
	vCollectionExpenses NUMBER;
BEGIN
	-- Update AD_PInstance
	DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID);
	v_ResultStr:='PInstanceNotFound';
 AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL);
	
	BEGIN -- BODY
    	-- Begin Get Parameters
		v_ResultStr:='ReadingParameters';
		FOR CurParameter IN (
			SELECT i.Record_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
			FROM AD_PInstance i
				JOIN AD_PInstance_Para p ON i.AD_PInstance_ID=p.AD_PInstance_ID
			WHERE i.AD_PInstance_ID=PInstance_ID
			ORDER BY p.SeqNo
		) LOOP
			vRecordID := CurParameter.Record_ID;
		END LOOP;
		DBMS_OUTPUT.PUT_LINE('	vRecordID=' || vRecordID);
		-- Finish Get Parameter
		
		--<<BEGIN_PROCESS>>
		
		--Cargamos la configuracion para calculo de intereses
		SELECT * INTO vSetting FROM ssdnid_calcinterestsetting WHERE isactive='Y' ORDER BY created DESC LIMIT 1;
		IF vSetting.ssdnid_calcinterestsetting_id IS NULL THEN
			RAISE_APPLICATION_ERROR(-20000, 'No existe configuracion para calculo de intereses');
		END IF;
		
		FOR vRecord IN (
			SELECT ps.*
			FROM fin_payment_schedule AS ps
				JOIN c_invoice AS i ON i.c_invoice_id=ps.c_invoice_id
			WHERE i.issotrx='Y' AND ps.outstandingamt>vSetting.minimumvalue
				AND COALESCE(ps.em_ssdnid_cutoff_date,ps.expecteddate)>vSetting.startdate AND COALESCE(ps.em_ssdnid_cutoff_date,ps.expecteddate)::DATE<now()::DATE
				AND now()::DATE-COALESCE(ps.em_ssdnid_cutoff_date,ps.expecteddate)::DATE-vSetting.daysofgrace>0
		) LOOP
			--Calculamos los dias de atraso
			vDaysLate := (now()::DATE-COALESCE(ps.em_ssdnid_cutoff_date,ps.expecteddate)::DATE-vSetting.daysofgrace)::NUMERIC;
			--Calculamos los intereses por mora
			vInterestLatePayment := vRecord.outstandingamt * (vSetting.rate / 36000) * vDaysLate;
			
			--Calculamos los gastos de cobraza
			vCollectionExpenses := 0;
			IF vSetting.factor > 0 THEN
				IF vDaysLate <= vSetting.factor THEN
					vCollectionExpenses := vDaysLate * (
						(SELECT surchargevalue FROM ssdnid_tablesic AS tsic
						WHERE vRecord.outstandingamt>=tsic.rangefrom
							AND vRecord.outstandingamt<=tsic.rangeto
							AND ssdnid_calcinterestsetting_id=vSetting.ssdnid_calcinterestsetting_id)
						/ vSetting.factor);
				ELSE
					vCollectionExpenses := vSetting.defaultsurchargevalue;
				END IF;
			END IF;
			
			UPDATE fin_payment_schedule SET em_ssdnid_interestlatepayment=COALESCE(vRecord.em_ssdnid_interestlatepayment,0)+(vInterestLatePayment/vDaysLate),
				em_ssdnid_collectionexpenses=COALESCE(vRecord.em_ssdnid_collectionexpenses,0)+(vCollectionExpenses/vDaysLate)
			WHERE fin_payment_schedule_id=vRecord.fin_payment_schedule_id;
		END LOOP;
		--<<FINISH_PROCESS>>
		
		-- Update AD_PInstance
		DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message);
	 AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', CASE WHEN v_Message = '' THEN 1 ELSE 2 END, v_Message);
		RETURN;
	END; -- BODY
	EXCEPTION
	WHEN OTHERS THEN
	v_ResultStr:= '@ERROR='||SQLERRM;
	DBMS_OUTPUT.PUT_LINE( v_ResultStr) ;
 AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
	RETURN;
END SSDNID_CALCULATE_INTEREST
]]></body>
    </function>
  </database>
