<?xml version="1.0"?>
  <database name="FUNCTION SSDNID_CREATEDEBITNOTE2">
    <function name="SSDNID_CREATEDEBITNOTE2" type="VARCHAR">
      <parameter name="vorgid" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="vuserid" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="vrecords" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[vResult VARCHAR2(2000) := '';
		vOrg RECORD;
		vSetting RECORD;
		vPaymentSetting RECORD;
		vCheck NUMBER;
		vDoctype RECORD;
		vRecord RECORD;
		vILP NUMBER:= 0;
		vCE NUMBER:= 0;
		vInterestLatePayment NUMBER:= 0;
		vCollectionExpenses NUMBER:= 0;
		vTotalInterestLatePayment NUMBER:= 0;
		vTotalCollectionExpenses NUMBER:= 0;
		vRecordID VARCHAR2(32);
		vBPartner RECORD;
		vBPartnerLocationID VARCHAR2(32);
		vPaymentStatus VARCHAR2(32);
		vPaymentMethodID VARCHAR2(32);
		vDocumentno VARCHAR2(32);
		vPayment RECORD;
		vInvoice RECORD;
		vPaymentSchedule RECORD;
		vPaymentDetailID VARCHAR2(32);
		vReferencedInvoiceID VARCHAR2(32);
		vReferencedInvoice RECORD;
vLineBreak VARCHAR :='
'; --OBTG:VARCHAR2--
	BEGIN
	
		-- Obtenemos la organizacion
		SELECT * INTO vOrg FROM ad_org WHERE ad_org_id=vOrgID;
		
		-- Obtenemos las configuracion de intereses de mora y gastos de cobranza
		SELECT * INTO vSetting FROM ssdnid_calcinterestsetting WHERE isactive='Y' AND ad_org_id IN (vOrg.ad_org_id,'0')
		ORDER BY ad_org_id DESC LIMIT 1;
		IF vSetting.ssdnid_calcinterestsetting_id IS NULL THEN
			RAISE_APPLICATION_ERROR(-20000, 'No existe configuracion para intereses de mora y gastos de cobranza');
		END IF;
		
		-- Obtenemos las configuracion para crear cobros
		SELECT * INTO vPaymentSetting FROM ssdnid_payment WHERE isactive='Y' AND ad_org_id IN (vOrg.ad_org_id,'0')
		ORDER BY ad_org_id DESC LIMIT 1;
		IF vPaymentSetting.ssdnid_payment_id IS NULL THEN
			RAISE_APPLICATION_ERROR(-20000, 'No existe configuracion para crear cobros');
		END IF;
		
		-- Consultamos si existen productos configurados
		SELECT COUNT(*) INTO vCheck FROM ssdnid_product WHERE ssdnid_calcinterestsetting_id=vSetting.ssdnid_calcinterestsetting_id;
		IF vCheck = 0 THEN
			RAISE_APPLICATION_ERROR(-20000, 'No existe configuracion de productos para intereses de mora y gastos de cobranza');
		END IF;
		
		-- Consultamos el tipo de documento para intereses de mora y gastos de cobranza
		SELECT * INTO vDoctype FROM c_doctype WHERE ad_org_id IN (vOrg.ad_org_id,'0') AND em_ssdnid_interestdebitnote='Y'
		ORDER BY ad_org_id DESC LIMIT 1;
		IF vDoctype.c_doctype_id IS NULL THEN
			RAISE_APPLICATION_ERROR(-20000, 'No existe tipo de documento para intereses de mora y gastos de cobranza');
		END IF;
		
		-- Obtenemos las lineas seleccionadas
		FOR vRecord IN (
			SELECT * FROM ssdnid_pendinginterest
			WHERE ssdnid_pendinginterest_id IN
				(SELECT unnest(string_to_array(vRecords, '|')) AS ssdnid_pendinginterest_id FROM dual)
				AND (interestlatepayment>0 OR collectionexpenses>0)
			ORDER BY c_invoice_id, amount
		) LOOP
			vILP := CASE
					WHEN COALESCE(vRecord.tinterestlatepayment,0) = 0 THEN
						vRecord.interestlatepayment
					ELSE vRecord.tinterestlatepayment
				END;
			vCE := CASE
					WHEN COALESCE(vRecord.tcollectionexpenses,0) = 0 THEN
						vRecord.collectionexpenses
					ELSE vRecord.tcollectionexpenses
				END;
			
			vInterestLatePayment := vInterestLatePayment + vILP;
			vCollectionExpenses := vCollectionExpenses + vCE;
			
			vTotalInterestLatePayment := vTotalInterestLatePayment + COALESCE(vRecord.interestlatepayment,0);
			vTotalCollectionExpenses := vTotalCollectionExpenses + COALESCE(vRecord.collectionexpenses,0);
			
			vRecordID := vRecord.c_bpartner_id;
			
			-- Factura referenciada
			vReferencedInvoiceID := vRecord.c_invoice_id;
			SELECT * INTO vReferencedInvoice FROM c_invoice WHERE c_invoice_id=vReferencedInvoiceID;
			
			vResult := vResult||vLineBreak||'Factura: '||vReferencedInvoice.documentno||' - Fecha de Corte: '||vRecord.duedate::DATE::VARCHAR||' - Importe: '||vRecord.amount;
		END LOOP;
		
		-- Obtenemos el tercero del pago
		SELECT * INTO vBPartner FROM c_bpartner WHERE c_bpartner_id=vRecordID;
		
		-- Obtenemos la direccion del tercero
		SELECT c_bpartner_location_id INTO vBPartnerLocationID FROM c_bpartner_location WHERE c_bpartner_id=vRecordID;
		
		-- Validamos si existen intereses para facturar
		IF vInterestLatePayment > 0 OR vCollectionExpenses > 0 THEN
			-- Validamos si los intereses reales son iguales a los acordados
			IF
				vInterestLatePayment = vTotalInterestLatePayment
				AND vCollectionExpenses = vTotalCollectionExpenses
			THEN
				vPaymentMethodID := vSetting.fin_paymentmethod_id;
				vPaymentStatus := 'RDNC';
			ELSE
				vPaymentMethodID := vSetting.fin_paymentmethod2_id;
				vPaymentStatus := 'RPAE';
			END IF;
			
			-- Numero de documento para la factura
			ad_sequence_doctype(vDoctype.c_doctype_id, vOrg.ad_client_id, 'Y', vDocumentno);
			
			-- Creamos la factura
			INSERT INTO c_invoice (
				c_invoice_id,
				ad_client_id,
				ad_org_id,
				createdby,
				updatedby,
				documentno,
				docstatus,
				docaction,
				processing,
				c_doctype_id,
				c_doctypetarget_id,
				description,
				dateinvoiced,
				dateacct,
				c_bpartner_id,
				c_bpartner_location_id,
				isdiscountprinted,
				c_currency_id,
				paymentrule,
				c_paymentterm_id,
				m_pricelist_id,
				createfrom,
				generateto,
				copyfrom,
				fin_paymentmethod_id,
				calculate_promotions,
				em_aprm_processinvoice,
				em_scnr_invoice_id,
				em_scnr_isref_inv,
				em_spinco_taxid,
				em_eei_edocument,
				em_eei_creditnote,
				em_eei_debitnote,
				em_eei_resendinvoice,
				em_eei_generate_offline_2,
				em_eei_resendinvoice_2
			) VALUES (
				get_uuid(),
				vOrg.ad_client_id,
				vOrg.ad_org_id,
				vUserID,
				vUserID,
				vDocumentno,
				'DR',
				'CO',
				'N',
				vDoctype.c_doctype_id,
				vDoctype.c_doctype_id,
				vResult,
				now(),
				now(),
				vBPartner.c_bpartner_id,
				vBPartnerLocationID,
				'N',
				vSetting.c_currency_id,
				'P',
				vSetting.c_paymentterm_id,
				vBPartner.m_pricelist_id,
				'N',
				'N',
				'N',
				vPaymentMethodID,
				'N',
				'CO',
				vReferencedInvoiceID,
				'Y',
				vBPartner.taxid,
				'N',
				'N',
				'N',
				'N',
				'N',
				'N'
			) RETURNING * INTO vInvoice;

			FOR vRecord IN (
				SELECT p1.*, p2.c_uom_id
				FROM ssdnid_product p1
					JOIN m_product p2 ON p2.m_product_id=p1.m_product_id
				WHERE p1.ssdnid_calcinterestsetting_id=vSetting.ssdnid_calcinterestsetting_id
			) LOOP
				IF vRecord.interest = 'IFLP' AND vInterestLatePayment > 0 THEN
					INSERT INTO c_invoiceline (
						c_invoiceline_id,
						ad_client_id,
						ad_org_id,
						createdby,
						updatedby,
						c_invoice_id,
						line,
						m_product_id,
						c_uom_id,
						qtyinvoiced,
						priceactual,
						linenetamt,
						pricestd,
						c_tax_id
					) VALUES (
						get_uuid(),
						vOrg.ad_client_id,
						vOrg.ad_org_id,
						vUserID,
						vUserID,
						vInvoice.c_invoice_id,
						(SELECT COALESCE(MAX(line),0)+10 FROM c_invoiceline WHERE c_invoice_id=vInvoice.c_invoice_id),
						vRecord.m_product_id,
						vRecord.c_uom_id,
						1,
						vInterestLatePayment,
						vInterestLatePayment,
						vInterestLatePayment,
						vSetting.c_tax_id
					);
				ELSEIF vRecord.interest = 'CE' AND vCollectionExpenses > 0 THEN
					INSERT INTO c_invoiceline (
						c_invoiceline_id,
						ad_client_id,
						ad_org_id,
						createdby,
						updatedby,
						c_invoice_id,
						line,
						m_product_id,
						c_uom_id,
						qtyinvoiced,
						priceactual,
						linenetamt,
						pricestd,
						c_tax_id
					) VALUES (
						get_uuid(),
						vOrg.ad_client_id,
						vOrg.ad_org_id,
						vUserID,
						vUserID,
						vInvoice.c_invoice_id,
						(SELECT COALESCE(MAX(line),0)+10 FROM c_invoiceline WHERE c_invoice_id=vInvoice.c_invoice_id),
						vRecord.m_product_id,
						vRecord.c_uom_id,
						1,
						vCollectionExpenses,
						vCollectionExpenses,
						vCollectionExpenses,
						vSetting.c_tax_id
					);
				END IF;
			END LOOP;
			
			-- Completamos la factura
		  C_INVOICE_POST(NULL, vInvoice.c_invoice_id);
			
			-- Obtenemos el plan de pagos
			SELECT * INTO vPaymentSchedule FROM fin_payment_schedule WHERE c_invoice_id=vInvoice.c_invoice_id;
			IF vPaymentSchedule.fin_payment_schedule_id IS NULL THEN
				RAISE_APPLICATION_ERROR(-20000, 'Error al completar la factura');
			END IF;
			
			-- Numero de documento para el cobro
			ad_sequence_doctype(vPaymentSetting.c_doctype_id, vOrg.ad_client_id, 'Y', vDocumentno);
			
			-- Creamos el pago
			INSERT INTO fin_payment (  
				fin_payment_id,
				ad_client_id,
				ad_org_id,
				createdby,
				updatedby,
				isreceipt,
				c_currency_id,
				fin_paymentmethod_id,
				documentno,
				paymentdate,
				fin_financial_account_id,
				c_doctype_id,
				status,
				c_bpartner_id,
				amount,
				em_ssior_detailreport,
				em_aprm_reconcile_payment,
				em_aprm_executepayment,
				em_aprm_add_scheduledpayments,
				finacc_txn_amount
			) VALUES (
				get_uuid(),
				vOrg.ad_client_id,
				vOrg.ad_org_id,
				vUserID,
				vUserID,
				'Y',
				vSetting.c_currency_id,
				vPaymentMethodID,
				vDocumentno,
				now(),
				vPaymentSetting.fin_financial_account_id,
				vPaymentSetting.c_doctype_id,
				'RPAP',
				vBPartner.c_bpartner_id,
				vInterestLatePayment+vCollectionExpenses,
				'Y',
				'N',
				'N',
				'N',
				vInterestLatePayment+vCollectionExpenses
			) RETURNING * INTO vPayment;
			
			-- Creamos el detalle de pago
			INSERT INTO fin_payment_detail (
				fin_payment_detail_id,
				ad_client_id,
				ad_org_id,
				createdby,
				updatedby,
				fin_payment_id,
				amount,
				refund
			) values(
				get_uuid(),
				vPayment.ad_client_id,
				vPayment.ad_org_id,
				vPayment.createdby,
				vPayment.updatedby,
				vPayment.fin_payment_id,
				vInterestLatePayment+vCollectionExpenses,
				'N'
			) RETURNING fin_payment_detail_id INTO vPaymentDetailID;

			INSERT INTO fin_payment_scheduledetail (
				fin_payment_scheduledetail_id,
				ad_client_id,
				ad_org_id,
				createdby,
				updatedby,
				fin_payment_detail_id,
				fin_payment_schedule_invoice,
				amount,
				c_bpartner_id,
				isinvoicepaid
			) values(
				get_uuid(),
				vPayment.ad_client_id,
				vPayment.ad_org_id,
				vPayment.createdby,
				vPayment.updatedby,
				vPaymentDetailID,
				vPaymentSchedule.fin_payment_schedule_id,
				vInterestLatePayment+vCollectionExpenses,
				vBPartner.c_bpartner_id,
				'Y'
			);

			IF vPaymentStatus = 'RDNC' THEN
				-- Actualizamos la linea del monto pendiente
				UPDATE fin_payment_scheduledetail SET amount=(amount-(vInterestLatePayment+vCollectionExpenses))
				WHERE fin_payment_schedule_invoice=vPaymentSchedule.fin_payment_schedule_id
					AND fin_payment_detail_id IS NULL AND isinvoicepaid='N';

				-- Actualizamos el plan de pago
				UPDATE fin_payment_schedule SET paidamt=(paidamt+vInterestLatePayment+vCollectionExpenses),
					outstandingamt=(outstandingamt-(vInterestLatePayment+vCollectionExpenses)),
					em_ssdnid_payment=vPayment.fin_payment_id
				WHERE fin_payment_schedule_id=vPaymentSchedule.fin_payment_schedule_id;

				-- Cambiamos la factura a pagado
				UPDATE c_invoice SET ispaid='Y', totalpaid=(totalpaid+vInterestLatePayment+vCollectionExpenses),
					outstandingamt=(outstandingamt-(vInterestLatePayment+vCollectionExpenses))
				WHERE c_invoice_id=vInvoice.c_invoice_id;
				
				--Creamos la transaccion
				INSERT INTO fin_finacc_transaction (
					fin_finacc_transaction_id,
					ad_client_id,
					ad_org_id,
					createdby,
					updatedby,
					c_currency_id,
					fin_financial_account_id,
					line,
					fin_payment_id,
					dateacct,
					status,
					depositamt,
					processed,
					trxtype,
					statementdate,
					description,
					c_bpartner_id,
					em_aprm_processed
				) VALUES (
					get_uuid(),
					vPayment.ad_client_id,
					vPayment.ad_org_id,
					vPayment.createdby,
					vPayment.updatedby,
					vPayment.c_currency_id,
					vPayment.fin_financial_account_id,
					(SELECT COALESCE(MAX(line),0)+10 FROM fin_finacc_transaction WHERE fin_financial_account_id=vPayment.fin_financial_account_id),
					vPayment.fin_payment_id,
					now(),
					'RDNC',
					vPayment.amount,
					'Y',
					'BPD',
					now(),
					'Factura Nº: '||vInvoice.documentno,
					vPayment.c_bpartner_id,
					'R'
				);
				
				-- Actualizamos la cuenta financiera
				UPDATE fin_financial_account SET currentbalance=(
						SELECT COALESCE(SUM(fat.depositamt),0)
						FROM fin_finacc_transaction AS fat
							JOIN fin_financial_account AS fa ON fa.fin_financial_account_id=fat.fin_financial_account_id
						WHERE fa.fin_financial_account_id=vPayment.fin_financial_account_id
					) - (
						SELECT COALESCE(SUM(fat.paymentamt),0)
						FROM fin_finacc_transaction AS fat
							JOIN fin_financial_account AS fa ON fa.fin_financial_account_id=fat.fin_financial_account_id
						WHERE fa.fin_financial_account_id=vPayment.fin_financial_account_id
					)
				WHERE fin_financial_account_id=vPayment.fin_financial_account_id;
			END IF;
			
			-- Actualizamos el cobro
			UPDATE fin_payment SET
				status=vPaymentStatus,
				description ='Factura Nº: '||vInvoice.documentno,
				em_aprm_process_payment ='RE',
				processed ='Y'
			WHERE fin_payment_id=vPayment.fin_payment_id;
			
			-- Actualizamos las lineas seleccionadas
			FOR vRecord IN (
				SELECT * FROM ssdnid_pendinginterest
				WHERE ssdnid_pendinginterest_id IN
					(SELECT unnest(string_to_array(vRecords, '|')) AS ssdnid_pendinginterest_id FROM dual)
				AND (interestlatepayment>0 OR collectionexpenses>0)
			) LOOP
				UPDATE ssdnid_pendinginterest SET
					interestlatepayment=0,
					collectionexpenses=0,
					tinterestlatepayment=0,
					tcollectionexpenses=0,
					debitnote_id=vInvoice.c_invoice_id,
					fin_payment_id=vPayment.fin_payment_id
				WHERE ssdnid_pendinginterest_id=vRecord.ssdnid_pendinginterest_id;
			END LOOP;
		END IF;
		
		RETURN 'OK';
END SSDNID_CREATEDEBITNOTE2
]]></body>
    </function>
  </database>
